#!/bin/sh

config_exists() {
    git config $1 > /dev/null
    if [ $? -ne 0 ]; then
        echo "[pre-commit hook] Please set $1 with:"
        # Preference is to set configs on a per repo basis, hence --local
        echo "    git config --local $1 'VALUE'"
        exit 1
    fi
}

config_equals() {
    if [ "$(git config $1)" != "$2" ]; then
        echo "[pre-commit hook] Please set $1 with:"
        echo "    git config $1 $2"
        exit 1
    fi
}

set_user_email() {
    # Sets user.email for a repo using [email-aliases] defined in .gitconfig
    if [ "$(git config user.email)" = "h@none" ]; then
        aliases=$(git config -l | sed -n 's/^email-aliases\.\(.*=.*\)/\t\1/p')
        choices=$(git config -l | sed -n 's/^email-aliases\.\(.*\)=.*/\1,/p' | tr -d '\n')
        exec < /dev/tty
        echo "[pre-commit hook] Please select user.email to be used for commits against this repo"
        echo "$aliases"
        read -p  "["$choices"-]? " choice
        exec <&-

        email=$(git config email-aliases.$choice)
        if [ $? -ne 0 ]; then
            echo "Invalid alias selected"
            exit 1
        else
            echo "Setting repository user.email to <$email>"
            git config user.email $email
            echo "Please resubmit your commit for changes to take affect"
            exit 1
        fi
    fi
}

set_user_email

# Extra checks for the un-initiated.
# Uncomment when publishing for system wide config checks
#
# config_exists user.email
# config_equals push.default tracking
# config_equals branch.autosetuprebase always

exit 0
