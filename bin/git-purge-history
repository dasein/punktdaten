#!/usr/bin/env python

"""Rewrite git revision history

Uses *git filter-branch --index-filter* to permanently remove data from a git
repo. Provide a list of files relative to repositories root directory to be
included for permanent removal from the repo.

Examples:
    echo mypass | git-purge-history -pf - git@github.com:dasein/punktdaten.git
    git-purge-history -f list_of_files /path/to/local/repo
"""

import argparse
import subprocess
import sys
from time import time

class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                      argparse.RawDescriptionHelpFormatter):
    """Argparse formatter to display __doc__ string correctly"""
    pass


ARGS = argparse.ArgumentParser(description=__doc__,
                               formatter_class=CustomFormatter)
ARGS.add_argument('-f', '--files', dest='files',
                  default='', type=str,
                  help='List of files to call git rm -rf on')
ARGS.add_argument('repository', metavar='<repo>', type=str,
                  help='Location of repository to filter')
ARGS.add_argument('-p', '--prune-empty', dest='prune_empty',
                  action='store_true',
                  help='Prune empty commits when running index filter')
ARGS.add_argument('--script', dest='script', type=str,
                  help='Script to run for tree-filter')


def run_shell_cmd(cmd, repodir=None):
    """Run cmd in local repo directory"""
    print 'Running cmd: %s' % cmd
    try:
        subprocess.check_call(cmd, cwd=repodir, shell=True)
    except subprocess.CalledProcessError, error:
        print error
        sys.exit(1)


def filter_repo(repo, files, script, prune_empty=False):
    """Run git filter-branch on a git repo"""
    repo_name = repo.split('/')[-1]

    new_repo = repo_name + '.new'
    orig_repo = repo_name + '.orig'


    if files:
        if files.isatty():
            print 'Please enter file(s) or dir(s) to remove followed by Ctrl-D'

       # Create list of files to purge from file or stdin
        purge_list = ' '.join([f.strip() for f in files.readlines()])
        index_filter = 'git rm -qr --cached --ignore-unmatch %s' %  purge_list
        filter_cmd = 'git filter-branch -f --index-filter "%s"' % index_filter
    elif script:
        filter_cmd = 'git filter-branch -f --tree-filter "%s"' % script
    else:
        pass
    # Fetch a copy of the current repo
    run_shell_cmd('git clone %s %s' % (repo, orig_repo))

    # We want to cleanup branches
    run_shell_cmd('git branch -r | grep -v master | xargs -L1 git checkout -t',
                  orig_repo)

    # Create a new repo to do our cleanup in
    run_shell_cmd('git clone --bare %s %s' % (orig_repo, new_repo))


    if prune_empty:
        filter_cmd += ' --prune-empty'
    filter_cmd += ' --tag-name-filter cat -- --all'

    print "Running: %s" % filter_cmd
    run_shell_cmd(filter_cmd, new_repo)
    run_shell_cmd('rm -rf refs/original && git gc --prune=now', new_repo)
    run_shell_cmd('git fsck --cache --unreachable', new_repo)

    # Push cleaned repo to GitHub
    print '** Run the following command to push cleaned repo to new home**'
    print 'cd %s && git push --mirror <new repository>' % new_repo


def main():
    """Do it"""
    args = ARGS.parse_args()
    start_time = time()
    if args.script and args.files:
        print 'Specify either -f or --script'
        sys.exit(1)
    filter_repo(args.repository.rstrip('/'), args.files,
                args.script, args.prune_empty)
    print 'Script took %.2f seconds to run' % (time()-start_time)


if __name__ == "__main__":
    main()
