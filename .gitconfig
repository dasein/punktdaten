[includeIf "gitdir:~/work/"]
    path = ~/work/.gitconfig

[user]
        #email is set on a per repo basis using [email-aliases] section
        name = "Herbert Pfennig"
        email = "h@none"

[email-aliases]
        # Used by the set_user_email() pre-commit hook
        w = hpfennig@splunk.com
        p = dasein555@gmail.com

[branch]
        autosetuprebase = always
        autosetupmerge = false

[push]
        default = tracking

[init]
	templatedir = ~/.git_template

[core]
        editor = emacs -nw --no-init-file --no-site-file --load ~/.emacs.git
        whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
        excludesfile = ~/.gitignore_global
        hooksPath = /Users/hpfennig/.git_template/hooks/

[alias]
        s = status -sb
        st = status
        ci = commit
        br = branch
        co = checkout
        df = diff
        cl = log --date=short --no-merges --pretty='%C(red)%ad %C(yellow)%h %Creset%s %C(bold blue)<%an> %Cgreen[%-(trailers)%-]'
        clk = "!sh -c 'git log --date=short --no-merges --pretty=\"%C(red)%ad %C(yellow)%h %Creset%s %C(bold blue)<%aE> %Cgreen[%-(trailers:key=$0,valueonly)%-]\" $1'"
        ll = log --graph --pretty=format:'%C(yellow)%h %C(green)%d %Creset%s %Cred(%cr)' --abbrev-commit --decorate --date=short
        lla = log --graph --pretty=format:'%C(yellow)%h %C(green)%d %Creset%s %Cred(%cr)' --abbrev-commit --decorate --date=short --all
        lg = log --pretty=format:'%C(red)%ad %C(yellow)%h %C(green)%d %Creset%s %C(bold blue)<%an>' --date=short
        lgm = log --pretty=format:'%C(red)%ad %C(yellow)%h %C(green)%d %Creset%s %C(bold blue)<%cn>' --date=short --merges
        find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && git rev-list $commit..$branch --ancestry-path --first-parent) | tail -1'"
        merged = "!sh -c 'git branch -r --merged $0/$1 | grep -v $1 | grep $0 | cut -d/ -f2-'"
        cruft = "!f() { for b in $(git branch -r); do if [ -z \"$(git log -1 --since=\"12 month ago\" -s $b --)\" ]; then echo $b; fi; done }; f"
        fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
        root = !pwd
        pp = push --force-with-lease
        stsh = stash --keep-index
        staash = stash --include-untracked
        staaash = stash --all
        save = !git branch -f `git rev-parse --abbrev-ref HEAD`-save-`date +%Y-%m-%d` HEAD
	aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort

[color]
        ui = true

[color]
        branch = auto
        diff = auto
        status = auto

[color "branch"]
        current = yellow reverse
        local = yellow
        remote = green

[color "diff"]
        meta = yellow bold
        frag = magenta
        old = red bold
        new = green

[color "status"]
        added = yellow
        changed = green
        untracked = cyan

[diff "gunzip"]
        textconv = gunzip -c

[diff "tcpdump"]
        textconv = tcpdump -qns 0 -X -r

[merge]
        tool = ediff
        conflictstyle = diff3
        renamelimit = 5000

[mergetool "ediff"]
        cmd = emacs -nw --eval \" \
(progn\
  (defun ediff-write-merge-buffer ()\
    (let ((file ediff-merge-store-file))\
      (set-buffer ediff-buffer-C)\
      (write-region (point-min) (point-max) file)\
      (message \\\"Merge buffer saved in: %s\\\" file)\
      (set-buffer-modified-p nil)\
      (sit-for 1)))\
  (defun ediff-copy-both-to-C ()\
    (interactive)\
    (ediff-copy-diff ediff-current-difference nil 'C nil\
                     (concat\
                     (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)\
                     (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))\
  (defun add-d-to-ediff-mode-map () (define-key ediff-mode-map \"d\" 'ediff-copy-both-to-C))\
  (add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)\
  (setq ediff-quit-hook 'kill-emacs\
        ediff-quit-merge-hook 'ediff-write-merge-buffer)\
  (ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\"\
                                   \\\"$BASE\\\" nil \\\"$MERGED\\\"))\"
